Как загрузить файл используя модель (вариант с тонким контроллером и толстой моделью)
=====================================================================================

Хорошей практикой считается создание тонких контроллеров и толстых моделей
всегда, когда только это возможно.

Данный рецепт повторяет в точности то, что уже было описано в рецепте
«[Как загрузить файл используя модель](http://www.yiiframework.com/)» с той лишь
разницей, что теперь мы не будем писать код, связанный с работой с файлами
в контроллере, а вынесем его в модель.

Кроме того в рецепте будет показана модель и контроллер для того случая,
когда нам может понадобиться функционал не только добавления объекта модели с файлом
(C в CRUD), но и обновления файла при редактировании уже существующего объекта модели
(U в CRUD).

Контроллер
==========

Контроллер обыкновенный, такой же, какой генерируется при помощи Gii. Контроллер
не имеет понятия о том, что нужно каким-либо образом иметь дело с загружаемыми
файлами.

~~~
[php]
class ItemController extends CController{
    public function actionUpdate($id=null){
        if($id===null)
            $model=new Item;
        else if(!$model=Item::model()->findById($id))
            throw new CHttpException(404);
        if(isset($_POST['Item'])){
            $model->attributes=$_POST['Item'];
            if($model->save()){
                // добавляем флэш-сообщение о том, что элемент был успешно добавлен или обновлен
                // редиректим на нужную страницу
            }
        }
        $this->render('update',array('model'=>$model));
    }
}
~~~

Представление
=============

В представлении мы воспользуемся CActiveForm. Форму можно создавать и при помощи CHtml, но т.к.
это уже было показано в другом рецепте, то продемонстрируем создание формы при помощи CActiveForm.

~~~
[php]

~~~

Модель
======

Самая интересная часть рецепта и основной код по работе с файлами находится в модели.

~~~
[php]
class Item extends CActiveRecord{
    public $document;

    public function rules(){
        array('document','file','types'=>'doc,docx,odt,pdf'),
        array('document','unsafe'),
    }

    public function beforeSave(){
        if(!parent::beforeSave())
            return false;
        return true;
    }

    public function afterSave(){
        if(!parent::afterSave())
            return false;
        return true;
    }
}
~~~

Возможные улучшения
===================

Код в данном рецепте можно улучшить и сделать более пригодным для использования вновь
(code reuse):

- Перенести код модели по работе с файлами в поведение (behavior).

Что стоить изучить еще?
=======================

- Add here.
